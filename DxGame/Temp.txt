if (YukaNum != 0)
{
	// ジャンプ中且つ上昇中の場合は処理を分岐
	if (pl.State == 2 && pl.JumpPower > 0.0f)
	{
		float MinY;

		// 天井に頭をぶつける処理を行う

		// 一番低い天井にぶつける為の判定用変数を初期化
		MinY = 0.0f;

		// 当たったかどうかのフラグを当たっていないを意味する０にしておく
		HitFlag = 0;

		// 床ポリゴンの数だけ繰り返し
		for (i = 0; i < YukaNum; i++)
		{
			// i番目の床ポリゴンのアドレスを床ポリゴンポインタ配列から取得
			Poly = Yuka[i];

			// 足先から頭の高さまでの間でポリゴンと接触しているかどうかを判定
			LineRes = HitCheck_Line_Triangle(NowPos, VAdd(NowPos, VGet(0.0f, PLAYER_HIT_HEIGHT, 0.0f)), Poly->Position[0], Poly->Position[1], Poly->Position[2]);

			// 接触していなかったら何もしない
			if (LineRes.HitFlag == FALSE) continue;

			// 既にポリゴンに当たっていて、且つ今まで検出した天井ポリゴンより高い場合は何もしない
			if (HitFlag == 1 && MinY < LineRes.Position.y) continue;

			// ポリゴンに当たったフラグを立てる
			HitFlag = 1;

			// 接触したＹ座標を保存する
			MinY = LineRes.Position.y;
		}

		// 接触したポリゴンがあったかどうかで処理を分岐
		if (HitFlag == 1)
		{
			// 接触した場合はプレイヤーのＹ座標を接触座標を元に更新
			NowPos.y = MinY - PLAYER_HIT_HEIGHT;

			// Ｙ軸方向の速度は反転
			pl.JumpPower = -pl.JumpPower;
		}
	}
	else
	{
		float MaxY;

		// 下降中かジャンプ中ではない場合の処理

		// 床ポリゴンに当たったかどうかのフラグを倒しておく
		HitFlag = 0;

		// 一番高い床ポリゴンにぶつける為の判定用変数を初期化
		MaxY = 0.0f;

		// 床ポリゴンの数だけ繰り返し
		for (i = 0; i < YukaNum; i++)
		{
			// i番目の床ポリゴンのアドレスを床ポリゴンポインタ配列から取得
			Poly = Yuka[i];

			// ジャンプ中かどうかで処理を分岐
			if (pl.State == 2)
			{
				// ジャンプ中の場合は頭の先から足先より少し低い位置の間で当たっているかを判定
				LineRes = HitCheck_Line_Triangle(VAdd(NowPos, VGet(0.0f, PLAYER_HIT_HEIGHT, 0.0f)), VAdd(NowPos, VGet(0.0f, -1.0f, 0.0f)), Poly->Position[0], Poly->Position[1], Poly->Position[2]);
			}
			else
			{
				// 走っている場合は頭の先からそこそこ低い位置の間で当たっているかを判定( 傾斜で落下状態に移行してしまわない為 )
				LineRes = HitCheck_Line_Triangle(VAdd(NowPos, VGet(0.0f, PLAYER_HIT_HEIGHT, 0.0f)), VAdd(NowPos, VGet(0.0f, -40.0f, 0.0f)), Poly->Position[0], Poly->Position[1], Poly->Position[2]);
			}

			// 当たっていなかったら何もしない
			if (LineRes.HitFlag == FALSE) continue;

			// 既に当たったポリゴンがあり、且つ今まで検出した床ポリゴンより低い場合は何もしない
			if (HitFlag == 1 && MaxY > LineRes.Position.y) continue;

			// ポリゴンに当たったフラグを立てる
			HitFlag = 1;

			// 接触したＹ座標を保存する
			MaxY = LineRes.Position.y;
		}

		// 床ポリゴンに当たったかどうかで処理を分岐
		if (HitFlag == 1)
		{
			// 当たった場合

			// 接触したポリゴンで一番高いＹ座標をプレイヤーのＹ座標にする
			NowPos.y = MaxY;

			// Ｙ軸方向の移動速度は０に
			pl.JumpPower = 0.0f;

			// もしジャンプ中だった場合は着地状態にする
			if (pl.State == 2)
			{
				// 移動していたかどうかで着地後の状態と再生するアニメーションを分岐する
				if (MoveFlag)
				{
					// 移動している場合は走り状態に
					Player_PlayAnim(1);
					pl.State = 1;
				}
				else
				{
					// 移動していない場合は立ち止り状態に
					Player_PlayAnim(4);
					pl.State = 0;
				}

				// 着地時はアニメーションのブレンドは行わない
				pl.AnimBlendRate = 1.0f;
			}
		}
		else
		{
			// 床コリジョンに当たっていなくて且つジャンプ状態ではなかった場合は
			if (pl.State != 2)
			{
				// ジャンプ中にする
				pl.State = 2;

				// ちょっとだけジャンプする
				pl.JumpPower = PLAYER_FALL_UP_POWER;

				// アニメーションは落下中のものにする
				Player_PlayAnim(3);
			}
		}
	}
}
